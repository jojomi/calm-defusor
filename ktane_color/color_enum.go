// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package ktane_color

import (
	"fmt"
)

const (
	// ColorWhite is a Color of type White.
	ColorWhite Color = iota
	// ColorBlack is a Color of type Black.
	ColorBlack
	// ColorBlue is a Color of type Blue.
	ColorBlue
	// ColorRed is a Color of type Red.
	ColorRed
	// ColorYellow is a Color of type Yellow.
	ColorYellow
	// ColorGreen is a Color of type Green.
	ColorGreen
	// ColorNoMore is a Color of type NoMore.
	ColorNoMore
)

const _ColorName = "whiteblackblueredyellowgreennoMore"

var _ColorMap = map[Color]string{
	ColorWhite:  _ColorName[0:5],
	ColorBlack:  _ColorName[5:10],
	ColorBlue:   _ColorName[10:14],
	ColorRed:    _ColorName[14:17],
	ColorYellow: _ColorName[17:23],
	ColorGreen:  _ColorName[23:28],
	ColorNoMore: _ColorName[28:34],
}

// String implements the Stringer interface.
func (x Color) String() string {
	if str, ok := _ColorMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Color(%d)", x)
}

var _ColorValue = map[string]Color{
	_ColorName[0:5]:   ColorWhite,
	_ColorName[5:10]:  ColorBlack,
	_ColorName[10:14]: ColorBlue,
	_ColorName[14:17]: ColorRed,
	_ColorName[17:23]: ColorYellow,
	_ColorName[23:28]: ColorGreen,
	_ColorName[28:34]: ColorNoMore,
}

// ParseColor attempts to convert a string to a Color
func ParseColor(name string) (Color, error) {
	if x, ok := _ColorValue[name]; ok {
		return x, nil
	}
	return Color(0), fmt.Errorf("%s is not a valid Color", name)
}

// MarshalText implements the text marshaller method
func (x Color) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *Color) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseColor(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
