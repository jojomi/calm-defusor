// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package modules

import (
	"fmt"
)

const (
	// SixWordsPositionTopLeft is a SixWordsPosition of type TopLeft.
	SixWordsPositionTopLeft SixWordsPosition = iota
	// SixWordsPositionMiddleLeft is a SixWordsPosition of type MiddleLeft.
	SixWordsPositionMiddleLeft
	// SixWordsPositionBottomLeft is a SixWordsPosition of type BottomLeft.
	SixWordsPositionBottomLeft
	// SixWordsPositionTopRight is a SixWordsPosition of type TopRight.
	SixWordsPositionTopRight
	// SixWordsPositionMiddleRight is a SixWordsPosition of type MiddleRight.
	SixWordsPositionMiddleRight
	// SixWordsPositionBottomRight is a SixWordsPosition of type BottomRight.
	SixWordsPositionBottomRight
)

const _SixWordsPositionName = "topLeftmiddleLeftbottomLefttopRightmiddleRightbottomRight"

var _SixWordsPositionMap = map[SixWordsPosition]string{
	SixWordsPositionTopLeft:     _SixWordsPositionName[0:7],
	SixWordsPositionMiddleLeft:  _SixWordsPositionName[7:17],
	SixWordsPositionBottomLeft:  _SixWordsPositionName[17:27],
	SixWordsPositionTopRight:    _SixWordsPositionName[27:35],
	SixWordsPositionMiddleRight: _SixWordsPositionName[35:46],
	SixWordsPositionBottomRight: _SixWordsPositionName[46:57],
}

// String implements the Stringer interface.
func (x SixWordsPosition) String() string {
	if str, ok := _SixWordsPositionMap[x]; ok {
		return str
	}
	return fmt.Sprintf("SixWordsPosition(%d)", x)
}

var _SixWordsPositionValue = map[string]SixWordsPosition{
	_SixWordsPositionName[0:7]:   SixWordsPositionTopLeft,
	_SixWordsPositionName[7:17]:  SixWordsPositionMiddleLeft,
	_SixWordsPositionName[17:27]: SixWordsPositionBottomLeft,
	_SixWordsPositionName[27:35]: SixWordsPositionTopRight,
	_SixWordsPositionName[35:46]: SixWordsPositionMiddleRight,
	_SixWordsPositionName[46:57]: SixWordsPositionBottomRight,
}

// ParseSixWordsPosition attempts to convert a string to a SixWordsPosition
func ParseSixWordsPosition(name string) (SixWordsPosition, error) {
	if x, ok := _SixWordsPositionValue[name]; ok {
		return x, nil
	}
	return SixWordsPosition(0), fmt.Errorf("%s is not a valid SixWordsPosition", name)
}

// MarshalText implements the text marshaller method
func (x SixWordsPosition) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *SixWordsPosition) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseSixWordsPosition(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
