// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package modules

import (
	"fmt"
)

const (
	// SymbolsSymbolOStrich is a SymbolsSymbol of type OStrich.
	SymbolsSymbolOStrich SymbolsSymbol = iota
	// SymbolsSymbolAT is a SymbolsSymbol of type AT.
	SymbolsSymbolAT
	// SymbolsSymbolLambda is a SymbolsSymbol of type Lambda.
	SymbolsSymbolLambda
	// SymbolsSymbolKleinesN is a SymbolsSymbol of type KleinesN.
	SymbolsSymbolKleinesN
	// SymbolsSymbolRakete is a SymbolsSymbol of type Rakete.
	SymbolsSymbolRakete
	// SymbolsSymbolH is a SymbolsSymbol of type H.
	SymbolsSymbolH
	// SymbolsSymbolC is a SymbolsSymbol of type C.
	SymbolsSymbolC
	// SymbolsSymbolFalschesC is a SymbolsSymbol of type FalschesC.
	SymbolsSymbolFalschesC
	// SymbolsSymbolEuro is a SymbolsSymbol of type Euro.
	SymbolsSymbolEuro
	// SymbolsSymbolKringel is a SymbolsSymbol of type Kringel.
	SymbolsSymbolKringel
	// SymbolsSymbolLeererStern is a SymbolsSymbol of type LeererStern.
	SymbolsSymbolLeererStern
	// SymbolsSymbolFragezeichen is a SymbolsSymbol of type Fragezeichen.
	SymbolsSymbolFragezeichen
	// SymbolsSymbolCopyright is a SymbolsSymbol of type Copyright.
	SymbolsSymbolCopyright
	// SymbolsSymbolW is a SymbolsSymbol of type W.
	SymbolsSymbolW
	// SymbolsSymbolDoppelK is a SymbolsSymbol of type DoppelK.
	SymbolsSymbolDoppelK
	// SymbolsSymbolR is a SymbolsSymbol of type R.
	SymbolsSymbolR
	// SymbolsSymbolDelta is a SymbolsSymbol of type Delta.
	SymbolsSymbolDelta
	// SymbolsSymbolP is a SymbolsSymbol of type P.
	SymbolsSymbolP
	// SymbolsSymbolBT is a SymbolsSymbol of type BT.
	SymbolsSymbolBT
	// SymbolsSymbolZunge is a SymbolsSymbol of type Zunge.
	SymbolsSymbolZunge
	// SymbolsSymbolKronleuchter is a SymbolsSymbol of type Kronleuchter.
	SymbolsSymbolKronleuchter
	// SymbolsSymbolDrei is a SymbolsSymbol of type Drei.
	SymbolsSymbolDrei
	// SymbolsSymbolVollerStern is a SymbolsSymbol of type VollerStern.
	SymbolsSymbolVollerStern
	// SymbolsSymbolDoppelkreuz is a SymbolsSymbol of type Doppelkreuz.
	SymbolsSymbolDoppelkreuz
	// SymbolsSymbolAE is a SymbolsSymbol of type AE.
	SymbolsSymbolAE
	// SymbolsSymbolN is a SymbolsSymbol of type N.
	SymbolsSymbolN
	// SymbolsSymbolOmega is a SymbolsSymbol of type Omega.
	SymbolsSymbolOmega
)

const _SymbolsSymbolName = "OStrichATLambdakleinesNRaketeHCFalschesCEuroKringelLeererSternFragezeichenCopyrightWDoppelKRDeltaPBTZungeKronleuchterDreiVollerSternDoppelkreuzAENOmega"

var _SymbolsSymbolMap = map[SymbolsSymbol]string{
	SymbolsSymbolOStrich:      _SymbolsSymbolName[0:7],
	SymbolsSymbolAT:           _SymbolsSymbolName[7:9],
	SymbolsSymbolLambda:       _SymbolsSymbolName[9:15],
	SymbolsSymbolKleinesN:     _SymbolsSymbolName[15:23],
	SymbolsSymbolRakete:       _SymbolsSymbolName[23:29],
	SymbolsSymbolH:            _SymbolsSymbolName[29:30],
	SymbolsSymbolC:            _SymbolsSymbolName[30:31],
	SymbolsSymbolFalschesC:    _SymbolsSymbolName[31:40],
	SymbolsSymbolEuro:         _SymbolsSymbolName[40:44],
	SymbolsSymbolKringel:      _SymbolsSymbolName[44:51],
	SymbolsSymbolLeererStern:  _SymbolsSymbolName[51:62],
	SymbolsSymbolFragezeichen: _SymbolsSymbolName[62:74],
	SymbolsSymbolCopyright:    _SymbolsSymbolName[74:83],
	SymbolsSymbolW:            _SymbolsSymbolName[83:84],
	SymbolsSymbolDoppelK:      _SymbolsSymbolName[84:91],
	SymbolsSymbolR:            _SymbolsSymbolName[91:92],
	SymbolsSymbolDelta:        _SymbolsSymbolName[92:97],
	SymbolsSymbolP:            _SymbolsSymbolName[97:98],
	SymbolsSymbolBT:           _SymbolsSymbolName[98:100],
	SymbolsSymbolZunge:        _SymbolsSymbolName[100:105],
	SymbolsSymbolKronleuchter: _SymbolsSymbolName[105:117],
	SymbolsSymbolDrei:         _SymbolsSymbolName[117:121],
	SymbolsSymbolVollerStern:  _SymbolsSymbolName[121:132],
	SymbolsSymbolDoppelkreuz:  _SymbolsSymbolName[132:143],
	SymbolsSymbolAE:           _SymbolsSymbolName[143:145],
	SymbolsSymbolN:            _SymbolsSymbolName[145:146],
	SymbolsSymbolOmega:        _SymbolsSymbolName[146:151],
}

// String implements the Stringer interface.
func (x SymbolsSymbol) String() string {
	if str, ok := _SymbolsSymbolMap[x]; ok {
		return str
	}
	return fmt.Sprintf("SymbolsSymbol(%d)", x)
}

var _SymbolsSymbolValue = map[string]SymbolsSymbol{
	_SymbolsSymbolName[0:7]:     SymbolsSymbolOStrich,
	_SymbolsSymbolName[7:9]:     SymbolsSymbolAT,
	_SymbolsSymbolName[9:15]:    SymbolsSymbolLambda,
	_SymbolsSymbolName[15:23]:   SymbolsSymbolKleinesN,
	_SymbolsSymbolName[23:29]:   SymbolsSymbolRakete,
	_SymbolsSymbolName[29:30]:   SymbolsSymbolH,
	_SymbolsSymbolName[30:31]:   SymbolsSymbolC,
	_SymbolsSymbolName[31:40]:   SymbolsSymbolFalschesC,
	_SymbolsSymbolName[40:44]:   SymbolsSymbolEuro,
	_SymbolsSymbolName[44:51]:   SymbolsSymbolKringel,
	_SymbolsSymbolName[51:62]:   SymbolsSymbolLeererStern,
	_SymbolsSymbolName[62:74]:   SymbolsSymbolFragezeichen,
	_SymbolsSymbolName[74:83]:   SymbolsSymbolCopyright,
	_SymbolsSymbolName[83:84]:   SymbolsSymbolW,
	_SymbolsSymbolName[84:91]:   SymbolsSymbolDoppelK,
	_SymbolsSymbolName[91:92]:   SymbolsSymbolR,
	_SymbolsSymbolName[92:97]:   SymbolsSymbolDelta,
	_SymbolsSymbolName[97:98]:   SymbolsSymbolP,
	_SymbolsSymbolName[98:100]:  SymbolsSymbolBT,
	_SymbolsSymbolName[100:105]: SymbolsSymbolZunge,
	_SymbolsSymbolName[105:117]: SymbolsSymbolKronleuchter,
	_SymbolsSymbolName[117:121]: SymbolsSymbolDrei,
	_SymbolsSymbolName[121:132]: SymbolsSymbolVollerStern,
	_SymbolsSymbolName[132:143]: SymbolsSymbolDoppelkreuz,
	_SymbolsSymbolName[143:145]: SymbolsSymbolAE,
	_SymbolsSymbolName[145:146]: SymbolsSymbolN,
	_SymbolsSymbolName[146:151]: SymbolsSymbolOmega,
}

// ParseSymbolsSymbol attempts to convert a string to a SymbolsSymbol
func ParseSymbolsSymbol(name string) (SymbolsSymbol, error) {
	if x, ok := _SymbolsSymbolValue[name]; ok {
		return x, nil
	}
	return SymbolsSymbol(0), fmt.Errorf("%s is not a valid SymbolsSymbol", name)
}

// MarshalText implements the text marshaller method
func (x SymbolsSymbol) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *SymbolsSymbol) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseSymbolsSymbol(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
